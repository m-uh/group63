// Express
var express = require('express');
var app = express();
var PORT = 59983;

// Database
var mysql = require('mysql')

const { engine } = require('express-handlebars');
var exphbs = require('express-handlebars');     // Import express-handlebars
app.engine('.hbs', engine({extname: ".hbs"}));  // Create an instance of the handlebars engine to process templates
app.set('view engine', '.hbs');                 // Tell express to use the handlebars engine whenever it encounters a *.hbs file.



// Create a 'connection pool' using the provided credentials
var pool = mysql.createPool({
    connectionLimit : 10,
    host            : 'classmysql.engr.oregonstate.edu',
    user            : 'cs340_wangjia3',
    password        : '2924',
    database        : 'cs340_wangjia3'
})

app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use(express.static('public'));

// app.get('/index', async (req, res) => {
//     pool.query('SELECT authorID, name FROM Authors', function(error, results, fields) {
//         if (error) res.send(error);
//         else res.json(results);
//     });
// });

app.post('/add-author-ajax', function(req, res) 
{
    // Capture the incoming data and parse it back to a JS object
    let data = req.body;

    // Create the query and run it on the database
    query1 = `INSERT INTO Authors (name) VALUES ('${data.name}')`;
    pool.query(query1, function(error, rows, fields){

        // Check to see if there was an error
        if (error) {
            // Log the error to the terminal so we know what went wrong, and send the visitor an HTTP response 400 indicating it was a bad request.
            console.log(error)
            res.sendStatus(400);
        }
        else
        {
            // If there was no error, perform a SELECT * on Authors
            query2 = `SELECT * FROM Authors;`;
            pool.query(query2, function(error, rows, fields){

                // If there was an error on the second query, send a 400
                if (error) {
                    // Log the error to the terminal so we know what went wrong, and send the visitor an HTTP response 400 indicating it was a bad request.
                    console.log(error);
                    res.sendStatus(400);
                }
                // If all went well, send the results of the query back.
                else
                {
                    res.send(rows);
                }
            })
        }
    })
});

app.get('/authors', function(req, res) {  
    let query1 = "SELECT authorID, name FROM Authors;";

    pool.query(query1, function(error, rows, fields) {
        if (error) {
            console.log(error);
            res.sendStatus(400);
        } else {
            res.json(rows);
        }
    });
});

app.delete('/delete-author-ajax/:id', function(req, res) 
{
    let id = req.params.id;

    let query = `DELETE FROM Authors WHERE authorID = ${id}`;
    pool.query(query, function(error, rows, fields){

        if (error) {
            console.log(error)
            res.sendStatus(400);
        }
        else
        {
            res.sendStatus(200);
        }
    });
});

app.put('/edit-author-ajax/:id', function(req, res) {
    let id = req.params.id;
    let newName = req.body.name;

    let query = `UPDATE Authors SET name = ? WHERE authorID = ?`;
    pool.query(query, [newName, id], function(error, results, fields) {
        if (error) {
            console.log(error);
            res.sendStatus(400);
        }
        else {
            res.json({name: newName, authorID: id});
        }
    });
});

// Keep your root route serving the HTML page
app.get('/', function(req, res) {  
    res.render('index');
});

app.listen(PORT, function() {
    console.log(`Express started on http://localhost:${PORT}; press Ctrl-C to terminate.`);
});